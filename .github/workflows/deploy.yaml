name: Deploy

on:
  workflow_call:
    inputs:
      resources_prefix:
        description: 'Resources name prefix used to avoid naming conflicts between resources of different DataSpaces.'
        required: true
        type: string

  workflow_dispatch:
    inputs:
      resources_prefix:
        description: 'Resources name prefix used to avoid naming conflicts between resources of different DataSpaces.'
        required: true
        type: string

# Grant permissions to obtain federated identity credentials
# see https://docs.github.com/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
permissions:
  id-token: write
  contents: read

env:
  RESOURCES_PREFIX: ${{ github.event.inputs.resources_prefix || inputs.resources_prefix }}

jobs:

  Matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2
      - id: set-matrix
        run: |
          matrix=$(jq -c . participants.json)
          echo "::set-output name=matrix::$matrix"

  # Build runtime image in Azure Container Registry, tagged with the unique run_number.
  Build-Connector:
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
    steps:
      # Checkout MVD code
      - uses: actions/checkout@v2

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Login to ACR'
        run: az acr login -n $ACR_NAME

      - uses: ./.github/actions/gradle-setup

      # Build MVD runtime JAR locally.
      # The result is a JAR file in MVD/launcher/build/libs.
      - name: 'Build runtime JAR'
        run: ./gradlew launcher:shadowJar

      # Build Docker runtime image remotely on ACR & push it to the registry.
      - name: 'Build image'
        run: az acr build --registry $ACR_NAME --image mvd-edc/connector:${{ env.RESOURCES_PREFIX }} .
        working-directory: launcher

  # Build data dashboard webapp
  Build-Dashboard:
    runs-on: ubuntu-latest
    env:
      ACR_NAME: ${{ secrets.ACR_NAME }}
    steps:
      - name: Checkout EDCDataDashboard
        uses: actions/checkout@v2
        with:
          repository: agera-edc/EDCDataDashboard
          ref: 6657d71bca844e0c2fc0a01081b8fd97628d522f

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Login to ACR'
        run: az acr login -n $ACR_NAME

      # Build Docker runtime image remotely on ACR & push it to the registry.
      - name: 'Build image'
        run: az acr build --registry $ACR_NAME --image mvd-edc/data-dashboard:${{ env.RESOURCES_PREFIX }} .

  # Deploy shared dataspace components.
  Deploy-Authority:
    runs-on: ubuntu-latest
    outputs:
      app_insights_connection_string: ${{ steps.runterraform.outputs.app_insights_connection_string }}

    defaults:
      run:
        working-directory: deployment/terraform/authority

    steps:
      - uses: actions/checkout@v2

      - name: 'Create tfvars file'
        run: |
          cat > terraform.tfvars <<EOF
          prefix = "${{ env.RESOURCES_PREFIX }}"
          resource_group = "rg-${{ env.RESOURCES_PREFIX }}"
          EOF

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Upload tfvars file'
        run: az storage blob upload --account-name "${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT }}" -c "${{ secrets.TERRAFORM_STATE_CONTAINER }}" -f terraform.tfvars -n "${{ env.RESOURCES_PREFIX }}.tfvars" --auth-mode key

      - name: 'Run terraform'
        id: runterraform
        run: |
          # Create backend.conf file to retrieve the remote terraform state during terraform init.
          echo '
            resource_group_name  = "${{ secrets.COMMON_RESOURCE_GROUP }}"
            storage_account_name = "${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT }}"
            container_name       = "${{ secrets.TERRAFORM_STATE_CONTAINER }}"
            key                  = "${{ env.RESOURCES_PREFIX }}.tfstate"
          ' >> backend.conf
          terraform init -backend-config=backend.conf
          terraform apply -auto-approve
          app_insights_connection_string=$(terraform output -raw app_insights_connection_string)
          echo "::set-output name=app_insights_connection_string::${app_insights_connection_string}"

        env:
          # Authentication settings for Terraform AzureRM provider
          # See https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  # Deploy dataspace participants in parallel.
  Deploy-Participants:
    needs:
      - Deploy-Authority
      - Build-Connector
      - Build-Dashboard
      - Matrix
    runs-on: ubuntu-latest
    outputs:
      company1_edc_host: ${{ steps.runterraform.outputs.company1_edc_host }}
      company2_edc_host: ${{ steps.runterraform.outputs.company2_edc_host }}
      company3_edc_host: ${{ steps.runterraform.outputs.company3_edc_host }}
      company1_key_vault: ${{ steps.runterraform.outputs.company1_key_vault }}
      company2_key_vault: ${{ steps.runterraform.outputs.company2_key_vault }}
      company3_key_vault: ${{ steps.runterraform.outputs.company3_key_vault }}
      company1_api_key: ${{ steps.runterraform.outputs.company1_api_key }}
      company2_api_key: ${{ steps.runterraform.outputs.company2_api_key }}
      company3_api_key: ${{ steps.runterraform.outputs.company3_api_key }}
      company1_did_host: ${{ steps.runterraform.outputs.company1_did_host }}
      company2_did_host: ${{ steps.runterraform.outputs.company2_did_host }}
      company3_did_host: ${{ steps.runterraform.outputs.company3_did_host }}
      company1_connector_name: ${{ steps.runterraform.outputs.company1_connector_name }}
      company2_connector_name: ${{ steps.runterraform.outputs.company2_connector_name }}
      company3_connector_name: ${{ steps.runterraform.outputs.company3_connector_name }}
      company1_assets_storage_account: ${{ steps.runterraform.outputs.company1_assets_storage_account }}
      company2_assets_storage_account: ${{ steps.runterraform.outputs.company2_assets_storage_account }}
      company3_assets_storage_account: ${{ steps.runterraform.outputs.company3_assets_storage_account }}

    strategy:
      matrix: ${{ fromJson(needs.Matrix.outputs.matrix) }}

    defaults:
      run:
        working-directory: deployment/terraform/participant

    steps:
      - uses: actions/checkout@v2

      - name: 'Generate key'
        run: |
          openssl ecparam -name prime256v1 -genkey -noout -out key.pem
          openssl ec -in key.pem -pubout -out key.public.pem
          docker run -i danedmunds/pem-to-jwk:1.2.1 --public --pretty < key.public.pem > key.public.jwk

      - name: 'Download app insights agent'
        run: curl --fail -o applicationinsights-agent.jar https://github.com/microsoft/ApplicationInsights-Java/releases/download/3.2.11/applicationinsights-agent-3.2.11.jar

      - name: 'Create tfvars file'
        run: |
          cat > terraform.tfvars <<EOF
          acr_resource_group = "${{ secrets.COMMON_RESOURCE_GROUP }}"
          acr_name = "${{ secrets.ACR_NAME }}"
          participant_name = "${{ matrix.participant }}"
          participant_region = "${{ matrix.region }}"
          data_dashboard_theme = "${{ matrix.data_dashboard_theme }}"
          prefix = "${{ env.RESOURCES_PREFIX }}"
          resource_group = "rg-${{ matrix.participant }}-${{ env.RESOURCES_PREFIX }}"
          app_insights_agent_jar = "applicationinsights-agent.jar"
          runtime_image = "mvd-edc/connector:${{ env.RESOURCES_PREFIX }}"
          dashboard_image = "mvd-edc/data-dashboard:${{ env.RESOURCES_PREFIX }}"
          application_sp_object_id = "${{ secrets.APP_OBJECT_ID }}"
          application_sp_client_id = "${{ secrets.APP_CLIENT_ID }}"
          registry_resource_group = "${{ secrets.COMMON_RESOURCE_GROUP }}"
          registry_storage_account = "${{ secrets.REGISTRY_STORAGE_ACCOUNT }}"
          registry_share = "${{ secrets.REGISTRY_SHARE }}"
          EOF

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Upload tfvars file'
        run: az storage blob upload --account-name "${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT }}" -c "${{ secrets.TERRAFORM_STATE_CONTAINER }}" -f terraform.tfvars -n "${{ matrix.participant }}${{ env.RESOURCES_PREFIX }}.tfvars" --auth-mode key

      - name: 'Run terraform'
        id: runterraform
        run: |
          # Create backend.conf file to retrieve the remote terraform state during terraform init.
          echo '
            resource_group_name  = "${{ secrets.COMMON_RESOURCE_GROUP }}"
            storage_account_name = "${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT }}"
            container_name       = "${{ secrets.TERRAFORM_STATE_CONTAINER }}"
            key                  = "${{ matrix.participant }}${{ env.RESOURCES_PREFIX }}.tfstate"
          ' >> backend.conf
          terraform init -backend-config=backend.conf
          terraform apply -auto-approve
          CONNECTOR_NAME=$(terraform output -raw connector_name)
          DID_HOST=$(terraform output -raw did_host)
          EDC_HOST=$(terraform output -raw edc_host)
          ASSETS_STORAGE_ACCOUNT=$(terraform output -raw assets_storage_account)
          KEY_VAULT=$(terraform output -raw key_vault)
          WEBAPP_URL=$(terraform output -raw webapp_url)
          API_KEY=$(terraform output -raw api_key)
          echo "::notice title=MVD WebApp for ${{ matrix.participant }}::$WEBAPP_URL"
          echo "ASSETS_STORAGE_ACCOUNT=$ASSETS_STORAGE_ACCOUNT" >> $GITHUB_ENV
          echo "DID_HOST=$DID_HOST" >> $GITHUB_ENV
          echo "EDC_HOST=$EDC_HOST" >> $GITHUB_ENV
          echo "API_KEY=$API_KEY" >> $GITHUB_ENV
          echo "::set-output name=${{ matrix.participant }}_edc_host::${EDC_HOST}"
          echo "::set-output name=${{ matrix.participant }}_key_vault::${KEY_VAULT}"
          echo "::set-output name=${{ matrix.participant }}_api_key::${API_KEY}"
          echo "::set-output name=${{ matrix.participant }}_connector_name::${CONNECTOR_NAME}"
          echo "::set-output name=${{ matrix.participant }}_did_host::${DID_HOST}"
          echo "::set-output name=${{ matrix.participant }}_assets_storage_account::${ASSETS_STORAGE_ACCOUNT}"

        env:

          # Authentication settings for Terraform AzureRM provider
          # See https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

          # Terraform variables not included in terraform.tfvars.
          TF_VAR_key_file: "key.pem"
          TF_VAR_public_key_jwk_file: "key.public.jwk"
          TF_VAR_application_sp_client_secret: ${{ secrets.APP_CLIENT_SECRET }}
          TF_VAR_app_insights_connection_string: ${{ needs.Deploy-Authority.outputs.app_insights_connection_string }}

      - name: 'Verify did endpoint is available'
        run: curl https://$DID_HOST/.well-known/did.json | jq '.id'

      - name: 'Verify deployed EDC is healthy'
        run: curl --retry 6 --fail http://${EDC_HOST}:8181/api/check/health

      - name: 'Seed data'
        run: |
          npm install -g newman
          deployment/seed-data.sh
        working-directory: .

  Verify:
    needs: Deploy-Participants
    runs-on: ubuntu-latest
    steps:
      # Checkout MVD code
      - uses: actions/checkout@v2

      - uses: ./.github/actions/gradle-setup

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'System tests'
        run: |
          ./gradlew :system-tests:test
        env:
          PROVIDER_IDS_URL: http://${{ needs.Deploy-Participants.outputs.company1_edc_host }}:8282
          PROVIDER_MANAGEMENT_URL: http://${{ needs.Deploy-Participants.outputs.company1_edc_host }}:9191
          CONSUMER_MANAGEMENT_URL: http://${{ needs.Deploy-Participants.outputs.company2_edc_host }}:9191
          CONSUMER_EU_KEY_VAULT: ${{ needs.Deploy-Participants.outputs.company2_key_vault }}
          CONSUMER_US_KEY_VAULT: ${{ needs.Deploy-Participants.outputs.company3_key_vault }}
          CONSUMER_EU_CATALOG_URL: http://${{ needs.Deploy-Participants.outputs.company2_edc_host }}:8181/api/federatedcatalog
          CONSUMER_US_CATALOG_URL: http://${{ needs.Deploy-Participants.outputs.company3_edc_host }}:8181/api/federatedcatalog
          PROVIDER_DID_URL: did:web:${{ needs.Deploy-Participants.outputs.company1_did_host }}
          CONSUMER_EU_DID_URL: did:web:${{ needs.Deploy-Participants.outputs.company2_did_host }}
          CONSUMER_US_DID_URL: did:web:${{ needs.Deploy-Participants.outputs.company3_did_host }}
          API_KEY: ${{ needs.Deploy-Participants.outputs.company2_api_key }}

  # Verify docker-compose setup for local testing
  VerifyLocalTests:
    needs: Deploy-Participants
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/gradle-setup

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: 'Run EDC instances in docker-compose'
        run: ./gradlew :launcher:shadowJar

      - name: 'create env file'
        run: |-
          cat <<EOF > system-tests/.env
          CONSUMER_EU_KEY_VAULT=${{ needs.Deploy-Participants.outputs.company2_key_vault }}
          CONSUMER_US_KEY_VAULT=${{ needs.Deploy-Participants.outputs.company3_key_vault }}
          PROVIDER_KEY_VAULT=${{ needs.Deploy-Participants.outputs.company1_key_vault }}
          APP_CLIENT_ID=${{ secrets.APP_CLIENT_ID }}
          APP_TENANT_ID=${{ secrets.ARM_TENANT_ID }}
          APP_CLIENT_SECRET=<client secret>
          PROVIDER_DID_URL=did:web:${{ needs.Deploy-Participants.outputs.company1_did_host }}
          CONSUMER_EU_DID_URL=did:web:${{ needs.Deploy-Participants.outputs.company2_did_host }}
          CONSUMER_US_DID_URL=did:web:${{ needs.Deploy-Participants.outputs.company3_did_host }}
          PROVIDER_CONNECTOR_NAME=${{ needs.Deploy-Participants.outputs.company1_connector_name }}
          CONSUMER_EU_CONNECTOR_NAME=${{ needs.Deploy-Participants.outputs.company2_connector_name }}
          CONSUMER_US_CONNECTOR_NAME=${{ needs.Deploy-Participants.outputs.company3_connector_name }}
          PROVIDER_ASSETS_STORAGE_ACCOUNT=${{ needs.Deploy-Participants.outputs.company1_assets_storage_account }}
          EOF

      - name: 'Publish env file'
        uses: actions/upload-artifact@v3
        with:
          name: testing-configuration
          path: system-tests/.env

      - name: 'Run EDC instances in docker-compose'
        run: docker-compose -f system-tests/docker-compose.yml up --build --detach
        timeout-minutes: 10
        env:
          APP_CLIENT_SECRET: ${{ secrets.APP_CLIENT_SECRET }}

      - name: 'Unit and system tests'
        run: ./gradlew test
        timeout-minutes: 10
        env:
          CONSUMER_EU_KEY_VAULT: ${{ needs.Deploy-Participants.outputs.company2_key_vault }}
          CONSUMER_US_KEY_VAULT: ${{ needs.Deploy-Participants.outputs.company3_key_vault }}

      - name: 'docker-compose logs'
        run: docker-compose -f system-tests/docker-compose.yml logs
        if: always()

